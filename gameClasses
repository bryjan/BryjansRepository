import random as r
#import colorama
from termcolor import colored

class TerrainTileType:
    def __init__(self,tileChar,tileColor,tileName):
        self.tileChar= str(tileChar)
        self.tileColor= str(tileColor)
        self.tileName= str(tileName)
    
    def __repr__(self):
        return self.tileName
        
class Cell:
    def __init__(self,TerrainType,xPos,yPos):
        self.terrainType= TerrainType
        self.xPos=int(xPos)
        self.yPos=int(yPos)
        self.neighborList=[]
        self.cellID=str(xPos)+","+str(yPos)
        self.containObject= False

    def checkContainObject(self,listOfObjects):

        for t in listOfObjects:
            if t.xPos== self.xPos and t.yPos== self.yPos:
                self.containObject = True
            else:
                self.containObject = False

    def __repr__(self):
        return self.terrainType.tileName
        
    def displayTile(self):
        return print(colored(self.terrainType.tileChar,self.terrainType.tileColor),end='')

class TerrainGenParams:
    def __init__(self,terrainType,seedingRatio,genLoops,neighborConversionRate):
        self.terrainType= terrainType
        self.seedingRatio= seedingRatio
        self.genLoops= genLoops
        self.neighborConversionRate= neighborConversionRate
    
    def conversionRoll(self):
        if r.randint(0,100)<= self.neighborConversionRate:
            return True
        else:
            return False
class Mech:
    def __init__(self,mechClass,xlocation,ylocation,mechName):
        self.maxHp=mechClass.mechMaxhp
        self.hp= self.maxHp
        self.name=mechName
        self.xPos=int(xlocation)
        self.yPos=int(ylocation)
        self.mechClass=mechClass
    def displayObject(self):
        return print(colored(self.mechClass.symbol,self.mechClass.symbolcolor),end='')
        
class MechClass:
    def __init__(self,size,radarSig,limbList,hp,symbol,color):
        self.size=size
        self.radarDetected=radarSig/2
        self.radarSized=int(radarSig*.7)
        self.radarID=radarSig
        self.limbs=limbList
        self.mechMaxhp=hp
        self.symbol=symbol
        self.symbolcolor=color
    def displayObject(self):
        return print(colored(self.symbol,self.symbolcolor),end='')
            
class MechLegs:
    def __init__(self,legName,speed,armor,hp,moduleList):
        self.name=legName
        self.mp=speed
        self.legArmor=armor
        self.maxLegHp=hp
        self.Leghp=hp
        self.legModuleList=moduleList
        
class MechHull:
    def __init__(self,hullName,pwrCapacity,pwrgen,armor,hp,moduleList):
        self.name=hullName
        self.pwrMax=pwrCapacity
        self.pwr=pwrCapacity
        self.pwrGen=pwrgen
        self.hullArmor=armor
        self.maxHullHp=hp
        self.hullHp=hp
        self.hullModuleList=moduleList

class MechHelm:
    def __init__(self,helmName,visualRange,radarStrength,actionPoints,armor,hp,moduleList):
        self.name=helmName
        self.visualView=visualRange
        self.ap=actionPoints
        self.helmArmor=armor
        self.maxHelmHp=hp
        self.helmHp=hp
        self.helmModuleList=moduleList


class MechAtkArm:
    def __init__(self,armName,accuracy,range,attacks,damage,damageSpread,critChance,armor,hp,moduleList):
        self.name=armName
        self.accuracy=accuracy
        self.range=range
        self.attacks=attacks
        self.damage=damage
        self.damageRng=damageSpread
        self.critChance=critChance
        self.atkArmArmor=armor
        self.maxatkArmHp=hp
        self.atkArmHp=hp
        self.atkArmModuleList=moduleList

#class Pack:
        
#class MechModules:
    #def __init__(self,moduleName,attributeMod,damagedAttribute,destroyedAttribute):
        #self.name=moduleName
        #self.status="Good"
        #self.attributeMod=attributeMod
        #self.dmgdAttribute=damagedAttribute
        #self.destydAtrribute=destroyedAttribute
        
    #def applyAttribute(self):
        #if self.status== "Good":
            #return self.attribute
        #elif self.status== "Damaged":
            #return self.dmgdAttribute
        #elif self.status== "Destoyed":
            #return self.destydAtrribute
